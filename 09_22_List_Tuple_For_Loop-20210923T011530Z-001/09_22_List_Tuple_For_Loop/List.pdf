{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "approved-fairy",
   "metadata": {},
   "source": [
    "# List Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "medieval-breed",
   "metadata": {},
   "outputs": [],
   "source": [
    "1. append\n",
    "2. extend\n",
    "3. insert\n",
    "4. remove\n",
    "5. pop\n",
    "6. clear\n",
    "7. sort\n",
    "8. index\n",
    "9. reverse\n",
    "10. count\n",
    "11. copy\n",
    "\n",
    "del \n",
    "sorted()\n",
    "min()\n",
    "max()\n",
    "sum()\n",
    "reversed()\n",
    "\n",
    "List Comprehension"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "asian-empty",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l1 = [10,2,3,5,7,8,9]\n",
    "min(l1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "liquid-catalog",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l1 = [10,2,3,5,7,8,9]\n",
    "max(l1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cognitive-material",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "44"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l1 = [10,2,3,5,7,8,9]\n",
    "sum(l1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "configured-boundary",
   "metadata": {},
   "outputs": [],
   "source": [
    "# List Constructor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fitted-twenty",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['P', 'u', 'n', 'e']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "string = 'Pune'\n",
    "list(string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cellular-rolling",
   "metadata": {},
   "outputs": [],
   "source": [
    "string = 'Data Science'\n",
    "l2 = list(string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "vocational-climb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Data Science'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "''.join(l2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "liberal-techno",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['python', 'and', 'Data', 'Science']"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "string = 'python and Data Science'\n",
    "l2 = string.split()\n",
    "l2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "coated-update",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['p', 'y', 't', 'h', 'o', 'n', ' ', 'a', 'n', 'd', ' ', 'D', 'a', 't', 'a', ' ', 'S', 'c', 'i', 'e', 'n', 'c', 'e']\n"
     ]
    }
   ],
   "source": [
    "string = 'python and Data Science'\n",
    "len(string)\n",
    "l3 = list(string)\n",
    "print(l3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "harmful-ambassador",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2, 3, 4, 5, 7]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tuple1 = (2,3,4,5,7)\n",
    "list1 = list(tuple1)\n",
    "list1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "collective-uzbekistan",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-y-t-h-o-n\n"
     ]
    }
   ],
   "source": [
    "string = 'python'\n",
    "# out_str = 'p-y-t-h-o-n'\n",
    "l1 = list(string)\n",
    "out_str = '-'.join(l1)\n",
    "print(out_str)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
